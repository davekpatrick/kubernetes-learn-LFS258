# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "davekpatrick/ubuntu-2004"
  config.vm.box_version = "2022.3.0"
  config.vm.box_url = "https://vagrantcloud.com/davekpatrick/ubuntu-2004"
  # 
  config.vm.define "head", primary: true do |head|
    #
    head.vm.provider "virtualbox" do |vBoxHead|
      # VirtualBox Specific changes
      vBoxHead.name = "k8s00"
    end
    head.vm.network :private_network, ip: "192.168.56.10"
    head.vm.hostname = "k8s00"
  end
  config.vm.define "worker" do |worker|
    #
    worker.vm.provider "virtualbox" do |vBoxWorker|
      # VirtualBox Specific changes
      vBoxWorker.name = "k8s01"
    end
    worker.vm.network :private_network, ip: "192.168.56.11"
    worker.vm.hostname = "k8s01"
    #
    worker.vm.provision "ansible" do |ansible|
      ansible.limit = 'all'
      ansible.config_file = "../ansible/ansible.cfg"
      ansible.playbook = "../ansible/playbook.yml"
      ansible.host_vars = {
        "head" => { 
                   "computeNodeType" => "controlPlane",
                   "computeIp" => "192.168.56.10",
                },
        "worker" => { 
                   "computeNodeType" => "worker",
                   "computeIp" => "192.168.56.11",
                }
      }
      ansible.groups = {
        "k8s" => ["head","worker"],
        "k8s:vars" => {
                       "provisionerSource" => "vagrant",
                       "computeEnvironment" => "DEV",
                       "computeProductKey" => "k8s"
                    }
     }
    end
  end
 
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network "public_network", bridge: "en0: Wi-Fi", type: "dhcp"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../data", "/data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    # Customize the number of processors
    vb.cpus = 2
    # Customize the amount of memory on the VM:
    vb.memory = "8192"
    #
    vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  # config.vm.provision "shell", path: "data/bootstrap.sh"
  # 
  
  # 
end
#EOF